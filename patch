diff --git a/src/psyche/psyche/vision_lp.py b/src/psyche/psyche/vision_lp.py
index b6a2863..10fcdc2 100644
--- a/src/psyche/psyche/vision_lp.py
+++ b/src/psyche/psyche/vision_lp.py
@@ -55,21 +55,33 @@ class VisionEnabledLanguageProcessor(LanguageProcessor):
 
         try:
             with requests.post(f"{self.base_url}/api/generate", json=payload, headers=headers, stream=True) as response:
+                self.get_logger().info(f"Sent request")
                 response.raise_for_status()
-
+                self.get_logger().info(f"Received good response")
                 for line in response.iter_lines():
+                    self.get_logger().info(f"Got line")
                     if line:
+                        self.get_logger().info(f"Decoding {line}")
                         decoded_line = json.loads(line.decode('utf-8'))
-                        chunk = decoded_line.get("chunk", "")
+                        self.get_logger().info(f"Unmarshalled as: {decoded_line}")
+                        chunk = decoded_line.get("response", "")
+                        self.get_logger().info(f"Extracted {chunk}")
                         result.response += chunk
+                        self.get_logger().info(f"Concatted {result.response}")
                         self.report_chunk(goal_handle, chunk, 0)
-
+                        self.get_logger().info(f"Chunk fed back")
+                        
                         # Update and process word and sentence buffers
-                        word_buffer, sentence_buffer = self.buffer_chunks(chunk, goal_handle, word_buffer, sentence_buffer)
-
+                        word_buffer, sentence_buffer = self.buffer_chunks(goal_handle, chunk, word_buffer, sentence_buffer)
+                        self.get_logger().info(f"Buffers: {word_buffer}, {sentence_buffer}")
+                        
+                        
                         if decoded_line.get('done', False):
+                            self.get_logger().info(f"Completed")
                             break
 
+                        self.get_logger().info(f"Looping")
+                        
             # Final flush for any remaining text in buffers
             if word_buffer:
                 self.report_chunk(goal_handle, word_buffer, 1)
@@ -98,4 +110,4 @@ def main(args=None):
 
 
 if __name__ == '__main__':
-    main()
\ No newline at end of file
+    main()
diff --git a/src/r1/launch/by_host_r1a1.launch.py b/src/r1/launch/by_host_r1a1.launch.py
index 682ead3..905a383 100644
--- a/src/r1/launch/by_host_r1a1.launch.py
+++ b/src/r1/launch/by_host_r1a1.launch.py
@@ -60,19 +60,7 @@ def generate_launch_description():
                 {"action_server_name": "instruct"}
             ],
         )
-    vision_lpu = Node(
-            package="psyche",
-            executable="vlpu",
-            name="vision_lpu",
-            output="screen",
-            parameters=[
-                {"model": "llava:13b"},
-                {"supports_images": True},
-                {"base_url": f"http://{forebrain_host}:11434"},
-                {"action_server_name": "inspect"}
-            ],
-        )
-    processors = [plain_lpu, offboard_lpu, vision_lpu]
+    processors = [plain_lpu, offboard_lpu]
 
     # Sensors
     platform = IncludeLaunchDescription(
@@ -96,28 +84,9 @@ def generate_launch_description():
             name="mpu6050driver",
             output="screen",
         )
-    podiops = Node(
-            package="opencv_cam",
-            executable="opencv_cam_main",
-            name="foot_eye",
-            output="screen",
-            parameters=[{
-                "index": 0
-            }]
-        )
-    who_knows = Node(
-        package="usb_cam",
-        executable="usb_cam_node_exe",
-        name="usb_cam",
-        output="screen",
-        parameters=[{
-            "video_device": "/dev/video0",
-            "image_width": 640,
-            "image_height": 480,
-        }]
-    )
-    #sensors = [platform, listen_for_speech, imu1, who_knows, podiops]
-    sensors = [who_knows]
+    #sensors = [platform, listen_for_speech, imu1]
+    sensors = []
+    
     # Senses & Faculties
     heartbeat = Node(
             package="psyche",
@@ -129,22 +98,6 @@ def generate_launch_description():
                 {"update_interval": 60.0},
             ],
         )
-    vision = Node(
-            package="psyche",
-            executable="distill",
-            name="the_lookout",
-            output="screen",
-            parameters=[{
-                "action_server_name": "inspect",
-                "supports_images": True,
-                "prompt": "You are a robot. Here is your internal state along with some recently processed images from your vision system. Using only the information here, describe what you see before you. Be succinct but thorough.\n\n{input_topics}\n\nWhat you're seeing as the robot:\n",
-                "input_topics": ["identity", "instant", "situation", "intent"],
-                "input_images": ["/image_raw"],
-                "output_topic": "sensation",
-                "update_interval": 1.0,
-                "accumulation_method": "latest"
-            }]
-        )
     power_management = Node(
             package="psyche",
             executable="distill",
@@ -311,9 +264,9 @@ def generate_launch_description():
 
     # Temporarily disabling some faculties while the robot is docked
     # [direct_manoevering, innate_musicality]
-    faculties = [vision]
+    faculties = [heartbeat]
     
-    #, heartbeat, power_management, proprioception, sentience, combobulation, intent, basic_autobiographical_memory, identity, os_shell, speech]
+    #vision, heartbeat, power_management, proprioception, sentience, combobulation, intent, basic_autobiographical_memory, identity, os_shell, speech]
     
     # Procedural Memory
     sing = Node(
diff --git a/src/ros2_mpu6050_driver b/src/ros2_mpu6050_driver
--- a/src/ros2_mpu6050_driver
+++ b/src/ros2_mpu6050_driver
@@ -1 +1 @@
-Subproject commit ffddef83fa13b9be89860288b125b6108dd02bff
+Subproject commit ffddef83fa13b9be89860288b125b6108dd02bff-dirty
