name: Build zenoh-python wheels

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Checkout zenoh-python
        uses: actions/checkout@v4
        with:
          repository: eclipse-zenoh/zenoh-python
          path: zenoh-python

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel

      - name: Build wheels with cibuildwheel
        run: |
          python -m cibuildwheel --output-dir dist --platform linux --project-dir ./zenoh-python
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: quay.io/pypa/manylinux2014_x86_64
          CIBW_MANYLINUX_AARCH64_IMAGE: quay.io/pypa/manylinux2014_aarch64

      - name: Show built wheels
        run: ls -la dist || true

      - name: Publish wheels to Releases (repo override available)
        env:
          RELEASE_REPO: ${{ secrets.RELEASE_REPO }}
          RELEASE_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          # If RELEASE_REPO is set, use gh CLI to create a release in that repo and upload assets
          if [ -n "${RELEASE_REPO:-}" ]; then
            echo "Publishing to release repo: $RELEASE_REPO"
            # Install GitHub CLI
            sudo apt-get update -y
            sudo apt-get install -y gh || true
            # Authenticate gh
            if [ -n "${RELEASE_TOKEN:-}" ]; then
              echo "Authenticating gh with provided token"
              echo "${RELEASE_TOKEN}" | gh auth login --with-token || true
            else
              echo "Using GITHUB_TOKEN for gh authentication"
              echo "${GITHUB_TOKEN}" | gh auth login --with-token || true
            fi
            # Create or find release by tag (the workflow is triggered on tag push)
            TAG=${GITHUB_REF##refs/tags/}
            echo "Creating or updating release for tag: $TAG"
            gh release create "$TAG" dist/* --repo "$RELEASE_REPO" --title "$TAG" --notes "Automated wheel release from workflow"
          else
            echo "No RELEASE_REPO set â€” using default release in this repo"
            # Use softprops action for current repo
            gh_release=false
          fi
          # If no RELEASE_REPO provided, fallback to softprops/action-gh-release via curl
          if [ -z "${RELEASE_REPO:-}" ]; then
            echo "Uploading release assets to this repo via GitHub API"
            # Use softprops action endpoint via curl: create a release and upload assets
            TAG=${GITHUB_REF##refs/tags/}
            api_url="https://api.github.com/repos/${GITHUB_REPOSITORY}/releases"
            # Create release
            data=$(jq -n --arg tag "$TAG" --arg name "$TAG" '{ tag_name: $tag, name: $name, draft: false, prerelease: false }')
            resp=$(curl -s -X POST -H "Authorization: token ${GITHUB_TOKEN}" -H "Content-Type: application/json" -d "$data" "$api_url")
            upload_url=$(echo "$resp" | jq -r .upload_url | sed -e 's/{?name,label}//')
            for f in dist/*; do
              fname=$(basename "$f")
              echo "Uploading $fname"
              curl -s -X POST -H "Authorization: token ${GITHUB_TOKEN}" -H "Content-Type: application/octet-stream" --data-binary @"$f" "$upload_url?name=$fname"
            done
          fi
