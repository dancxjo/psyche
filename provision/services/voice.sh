#!/usr/bin/env bash
set -euo pipefail
. "$(dirname "$0")/_common.sh" 2>/dev/null || true

# voice.sh â€” Provision Piper text-to-speech service with espeak-ng fallback
# Features:
# - Installs the Piper CLI along with a default English voice model
# - Falls back to espeak-ng when Piper is unavailable
# - Subscribes to /voice/$HOSTNAME for text (std_msgs/String)
# - Queueing of utterances with interrupt/resume/abandon controls

ROOT="${PSY_ROOT}"
ETC_DIR="/etc/psyched"
PY_NODE_PATH="${ETC_DIR}/voice_node.py"
LAUNCH_PATH="${ETC_DIR}/voice.launch.sh"

VOICE_DIR="${PSY_VOICE_MODEL_DIR:-${ROOT}/voices}"
PIPER_VOICE_NAME="${PSY_PIPER_VOICE:-en_US-joe-medium}"
PIPER_BASE_URL="${PSY_PIPER_BASE_URL:-https://huggingface.co/rhasspy/piper-voices/resolve/main}"
PIPER_MODEL_FILE="${PIPER_VOICE_NAME}.onnx"
PIPER_JSON_FILE="${PIPER_VOICE_NAME}.onnx.json"
PIPER_VOICE_SUBDIR="${PSY_PIPER_VOICE_SUBDIR:-}"
if [ -z "${PIPER_VOICE_SUBDIR}" ]; then
  # Derive Hugging Face layout (lang/locale/voice/quality) from the voice name when possible.
  case "${PIPER_VOICE_NAME}" in
    *_*-*)
      locale="${PIPER_VOICE_NAME%%-*}"
      remainder="${PIPER_VOICE_NAME#*-}"
      case "${remainder}" in
        *-*)
          quality="${remainder##*-}"
          voice_variant="${remainder%-*}"
          language="${locale%%_*}"
          if [ -n "${language}" ] && [ -n "${voice_variant}" ] && [ -n "${quality}" ]; then
            PIPER_VOICE_SUBDIR="${language}/${locale}/${voice_variant}/${quality}"
          fi
          ;;
      esac
      ;;
  esac
fi
if [ -n "${PIPER_VOICE_SUBDIR}" ]; then
  PIPER_MODEL_URL="${PSY_PIPER_MODEL_URL:-${PIPER_BASE_URL}/${PIPER_VOICE_SUBDIR}/${PIPER_MODEL_FILE}}"
  PIPER_JSON_URL="${PSY_PIPER_JSON_URL:-${PIPER_BASE_URL}/${PIPER_VOICE_SUBDIR}/${PIPER_JSON_FILE}}"
else
  PIPER_MODEL_URL="${PSY_PIPER_MODEL_URL:-${PIPER_BASE_URL}/${PIPER_MODEL_FILE}}"
  PIPER_JSON_URL="${PSY_PIPER_JSON_URL:-${PIPER_BASE_URL}/${PIPER_JSON_FILE}}"
fi
PIPER_MODEL_DEST="${PSY_VOICE_MODEL:-${VOICE_DIR}/${PIPER_MODEL_FILE}}"
PIPER_MODEL_DEST_DIR="$(dirname "${PIPER_MODEL_DEST}")"
PIPER_JSON_DEST="${PSY_VOICE_MODEL_JSON:-${PIPER_MODEL_DEST_DIR}/${PIPER_JSON_FILE}}"
PIPER_BIN_PATH=""

ensure_deps() {
  export PSY_DEFER_APT=1
  # Core runtime dependencies for ALSA playback, espeak fallback, and Piper GUI bits
  common_apt_install alsa-utils espeak-ng espeak-ng-data curl gir1.2-gtk-3.0 libgtk-3-0
}

find_piper_bin() {
  local candidate
  for candidate in "${PSY_PIPER_BIN:-}" piper-tts piper; do
    [ -n "$candidate" ] || continue
    if command -v "$candidate" >/dev/null 2>&1; then
      command -v "$candidate"
      return 0
    fi
  done
  return 1
}

install_piper_cli() {
  if PIPER_BIN_PATH="$(find_piper_bin)"; then
    echo "[voice] Piper CLI already present at ${PIPER_BIN_PATH}"
    return 0
  fi

  echo "[voice] Installing Piper CLI (piper-tts) via pip..."
  if sudo python3 -m pip install --upgrade --no-cache-dir piper-tts >/tmp/piper-tts-install.log 2>&1; then
    if PIPER_BIN_PATH="$(find_piper_bin)"; then
      echo "[voice] Piper CLI installed at ${PIPER_BIN_PATH}"
      return 0
    fi
    echo "[voice] WARNING: Piper CLI installation succeeded but binary not found" >&2
    return 1
  fi

  echo "[voice] WARNING: Failed to install Piper CLI; see /tmp/piper-tts-install.log" >&2
  return 1
}

download_file() {
  local url="$1" dest="$2"

  if [ -f "$dest" ]; then
    echo "[voice] Using cached download at ${dest}"
    return 0
  fi

  local tmp
  tmp="$(mktemp)"
  if curl -fsSL "$url" -o "$tmp"; then
    sudo install -D -m 0644 "$tmp" "$dest"
    rm -f "$tmp"
    return 0
  fi

  rm -f "$tmp"
  echo "[voice] WARNING: Failed to download $url" >&2
  return 1
}

download_piper_voice() {
  if [ -n "${PSY_VOICE_MODEL:-}" ] && [ -f "${PSY_VOICE_MODEL}" ]; then
    echo "[voice] Using existing Piper voice at ${PSY_VOICE_MODEL}"
    PIPER_MODEL_DEST="${PSY_VOICE_MODEL}"
    PIPER_MODEL_DEST_DIR="$(dirname "${PIPER_MODEL_DEST}")"
    PIPER_JSON_DEST="${PSY_VOICE_MODEL_JSON:-${PIPER_MODEL_DEST_DIR}/${PIPER_JSON_FILE}}"
    return 0
  fi

  sudo mkdir -p "${PIPER_MODEL_DEST_DIR}"

  if ! download_file "$PIPER_MODEL_URL" "$PIPER_MODEL_DEST"; then
    return 1
  fi

  # Voice config is optional but improves pronunciation; ignore failure.
  download_file "$PIPER_JSON_URL" "$PIPER_JSON_DEST" || true
  return 0
}

write_default_config() {
  local piper_ready="$1"
  local config="/etc/default/psyched-voice"
  local engine="espeak"

  if [ "$piper_ready" = "1" ]; then
    engine="piper"
  fi

  if [ ! -f "$config" ]; then
    {
      echo "# Auto-generated by voice.sh provision"
      echo "PSY_TTS_ENGINE=${engine}"
      echo "# Piper configuration"
      echo "# PSY_PIPER_BIN overrides Piper binary auto-detection (optional)"
      if [ "$piper_ready" = "1" ]; then
        echo "PSY_VOICE_MODEL=${PIPER_MODEL_DEST}"
      fi
      echo "# Optional espeak-ng customisation examples:"
      echo "# PSY_ESPEAK_VOICE=en+m7"
      echo "# PSY_ESPEAK_RATE=170"
      echo "# PSY_ESPEAK_PITCH=50"
      echo "# PSY_ESPEAK_ARGS=--path=/usr/share/espeak-ng-data"
    } | sudo tee "$config" >/dev/null
  else
    if sudo grep -qE '^[[:space:]]*PSY_TTS_ENGINE=' "$config"; then
      sudo sed -i "s#^[[:space:]]*PSY_TTS_ENGINE=.*#PSY_TTS_ENGINE=${engine}#" "$config"
    else
      printf '\nPSY_TTS_ENGINE=%s\n' "$engine" | sudo tee -a "$config" >/dev/null
    fi

    if [ "$piper_ready" = "1" ]; then
      if sudo grep -qE '^[[:space:]]*PSY_VOICE_MODEL=' "$config"; then
        sudo sed -i "s#^[[:space:]]*PSY_VOICE_MODEL=.*#PSY_VOICE_MODEL=${PIPER_MODEL_DEST}#" "$config"
      else
        printf '\nPSY_VOICE_MODEL=%s\n' "$PIPER_MODEL_DEST" | sudo tee -a "$config" >/dev/null
      fi
    fi
  fi

  if [ "$piper_ready" = "1" ] && [ -n "$PIPER_BIN_PATH" ]; then
    if sudo grep -qE '^[[:space:]]*PSY_PIPER_BIN=' "$config"; then
      sudo sed -i "s#^[[:space:]]*PSY_PIPER_BIN=.*#PSY_PIPER_BIN=${PIPER_BIN_PATH}#" "$config"
    else
      printf '\nPSY_PIPER_BIN=%s\n' "$PIPER_BIN_PATH" | sudo tee -a "$config" >/dev/null
    fi
  fi
}

install_node() {
  sudo mkdir -p "$ETC_DIR"
  if [ -f "${ROOT}/provision/services/voice_node.py" ]; then
    sudo install -m 0755 "${ROOT}/provision/services/voice_node.py" "$PY_NODE_PATH"
  else
    echo "[voice] ERROR: voice_node.py missing from repository; cannot install" >&2
    return 1
  fi

  local default_model="${PIPER_MODEL_DEST}"
  sudo tee "$LAUNCH_PATH" >/dev/null <<LAUNCH
#!/usr/bin/env bash
set -e
set +u; source /opt/ros/${ROS_DISTRO:-jazzy}/setup.bash; set -u

if [ -f /etc/default/psyched-voice ]; then
  set +u; source /etc/default/psyched-voice; set -u
fi

: "${PSY_TTS_ENGINE:=piper}"
if [ -z "${PSY_VOICE_MODEL:-}" ] && [ -f "${default_model}" ]; then
  export PSY_VOICE_MODEL="${default_model}"
fi
if [ -n "${PSY_PIPER_BIN:-}" ] && [ ! -x "${PSY_PIPER_BIN}" ]; then
  unset PSY_PIPER_BIN
fi

: "${PSY_PIPER_BIN:=}"
export PSY_TTS_ENGINE
exec python3 /etc/psyched/voice_node.py
LAUNCH
  sudo chmod +x "$LAUNCH_PATH"
}

provision() {
  ensure_deps

  local piper_cli_ok=0
  local voice_ok=0

  if install_piper_cli; then
    piper_cli_ok=1
  fi

  if download_piper_voice; then
    voice_ok=1
  fi

  install_node

  local piper_ready=0
  if [ "$piper_cli_ok" -eq 1 ] && [ "$voice_ok" -eq 1 ]; then
    piper_ready=1
  fi

  write_default_config "$piper_ready"

  if [ "$piper_ready" -eq 1 ]; then
    echo "[voice] Piper ready: binary=${PIPER_BIN_PATH:-<auto>} model=${PIPER_MODEL_DEST}"
  else
    echo "[voice] Piper not fully available; service will fall back to espeak-ng"
  fi

  echo "[voice] Provision complete. Launch with: sudo systemctl start psyched@voice.service"
}

case "${1:-provision}" in
  provision) provision ;;
  *) echo "unknown"; exit 1 ;;
esac
