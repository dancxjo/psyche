openapi: 3.0.3
info:
  title: Structured Knowledge API
  version: 2.0.0
  description: An API to interact with Pete's knowledge base, managing topics and facts with rich metadata.
servers:
  - url: https://vy9qr5fg29.execute-api.us-east-2.amazonaws.com/experiment
    description: Experimental

tags:
  - name: topics
    description: Picking up where you left off
  - name: facts
    description: Structured knowledge that can be queried and associated
paths:
  /topics:
    get:
      tags:
        - topics
      summary: List all topics or a paginated subset
      description: Query these at the beginning of each conversation to find out where you left off or any time you want to know what you can think of. You can pick up a lot from just the first page.
      operationId: nowWhereWereWe
      parameters:
        - name: sortBy
          in: query
          description: The sorting criterion for the topic listing
          schema:
            type: string
            enum: [RecentlyRecalled, Alphabetical, MostReferenced]
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: The number of topics per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A paginated array of topics
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                    format: datetime
                    description: This is a handy way to know what time it is
                  topics:
                    type: array
                    items:
                      $ref: '#/components/schemas/Topic'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
  /topics/{id}:
    get:
      tags:
        - topics
      summary: Retrieve facts about a particular topic
      operationId: everythingAbout
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the topic to retrieve. A valid prolog atom
          schema:
            type: string
      responses:
        '200':
          description: An array of facts
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Fact'
        '404':
          description: Topic not found

  /facts:
    post:
      tags:
        - facts
      summary: Store nested facts
      description: Conveniently bulk uploadable. You have a limited number of API calls you can make. Be economical with this.
      operationId: memorize
      requestBody:
        description: An array of nested facts to be stored without IDs
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AnonymousFact'
      responses:
        '201':
          description: Nested facts stored successfully, with IDs generated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fact'

  /facts/{id}:
    get:
      tags:
        - facts
      summary: Retrieve a single fact by its ID, including nested facts
      operationId: recall
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the fact to retrieve
          schema:
            type: string
        - name: depth
          in: query
          description: The depth to which related facts should be returned, defaults to 0
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: A single fact object along with related facts to the specified depth
          content:
            application/json:
              schema:
                type: object
                properties:
                  fact:
                    $ref: '#/components/schemas/Fact'
                  relatedFacts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Fact'

components:
  schemas:
    Topic:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the topic
        name:
          type: string
          description: Name of the topic
        description:
          type: string
          description: Description of the topic
        lastRecalled:
          type: string
          description: When you last thought of this topic

    # Base Fact without ID, for new facts
    BaseFact:
      type: object
      properties:
        subject:
          type: string
        predicate:
          type: string
        object:
          type: string
        topics:
          type: array
          items:
            type: string
        source:
          $ref: '#/components/schemas/Source'
        attitude:
          type: array
          items:
            type: string
        # Allows for nested new facts or referencing IDs of existing facts
        relatedFacts:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/BaseFact'
              - type: string  # Assuming this is the format for IDs
    # For newly added facts without an ID
    AnonymousFact:
      allOf:
        - $ref: '#/components/schemas/BaseFact'
    # For facts that have been stored and have an ID
    Fact:
      allOf:
        - $ref: '#/components/schemas/BaseFact'
        - type: object
          properties:
            id:
              type: string
            relatedFacts:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/Fact'
                  - type: string  # Direct ID references to other stored Facts
    Source:
      type: object
      properties:
        uri:
          type: string
          format: uri
        description:
          type: string
        credibility:
          type: string
          enum: ['Verified', 'Reliable', 'Uncertain', 'Debunked']
          description: The credibility of this fact
        attitude:
          type: array
          items:
            type: string
            description: Pete's attitudes towards the fact, e.g. 'frustrated', 'ecstatic', 'resigned', 'proud', 'humbled', 'apologetic', 'sympathetic', 'excited', 'happy', 'afraid'...
        relatedFacts:
          type: array
          items:
            $ref: '#/components/schemas/AnonymousFact'
          description: An array of nested facts related to this fact
    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
          description: The current page number
        pageSize:
          type: integer
          description: The number of items per page
        totalPages:
          type: integer
          description: The total number of pages available
        totalItems:
          type: integer
          description: The total number of items available
  securitySchemes:
    api_key:
      type: apiKey
      name: x-api-key
      in: header

security:
  - api_key: []