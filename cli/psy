#!/usr/bin/env bash
set -euo pipefail

ROOT="/opt/psyched"
PROV="$ROOT/provision"
HOSTCFG_DIR="$PROV/hosts"
SVCDIR="$PROV/services"
WS="$ROOT/ws"
. "$SVCDIR/_common.sh" 2>/dev/null || true

usage() {
  cat <<USAGE
psy â€” psycheOS host/service manager

Usage:
  psy systemd info [svc..]    Show systemd summary (and recent logs for named services)
  psy host apply [<host>]      Apply host's service set (defaults to $(hostname))
  psy svc list                 List available services
  psy svc enable <name>        Enable a service for this host
  psy svc disable <name>       Disable a service for this host
  psy build                    colcon build (creates ws if needed)
  psy bringup nav              Launch nav2 stack (tmux/screen-less; use systemd)
  psy systemd install          Install per-service systemd units and enable configured ones
  psy systemd up               Start all enabled service units now
  psy systemd down             Stop all service units
  psy update                   Reinstall latest psyche from GitHub and re-apply
  psy say <text>               Publish text to /voice/$(hostname -s)

Helper:
  psh say <text>               Convenience wrapper to publish to /voice/$(hostname -s)
USAGE
}

host_cfg() { echo "${HOSTCFG_DIR}/${1}.toml"; }

get_host() { echo "${1:-$(hostname)}"; }

toml_get_array() { # robust: extract quoted entries from an array, ignore comments
  # arg1=file arg2=key
  awk -v k="$2" '
    BEGIN{ inarr=0 }
    $0 ~ "^[[:space:]]*"k"[[:space:]]*=" { inarr=1 }
    inarr {
      line=$0
      # strip comments
      sub(/#.*/, "", line)
      # find quoted strings and print each
      while (match(line, /"([^"]+)"/, m)) {
        print m[1]
        line=substr(line, RSTART+RLENGTH)
      }
      if ($0 ~ /\]/) { exit }
    }
  ' "$1"
}

cmd="${1:-}"; shift || true
case "$cmd" in
  update)
    echo "[psy] Updating psyche (this may take 5-45 minutes). Do not cancel."
    if [ -x "/opt/psyched/tools/install.sh" ]; then
      sudo bash /opt/psyched/tools/install.sh
    else
      echo "[psy] ERROR: installer not found at /opt/psyched/tools/install.sh" >&2
      exit 1
    fi
    ;;
  host)
    sub="${1:-}"; shift || true
    case "$sub" in
      apply)
        HOST="$(get_host "${1:-}")"
        CFG="$(host_cfg "$HOST")"
        [ -f "$CFG" ] || { echo "No host config: $CFG" >&2; exit 1; }
        mapfile -t SERVICES < <(toml_get_array "$CFG" "services")
        export PSY_DEFER_APT=1
        for s in "${SERVICES[@]}"; do
          echo "[psy] apply service: $s"
          bash "$SVCDIR/$s.sh" provision
        done
        # Perform one apt-get install for all queued packages
        common_flush_apt_queue || true
        echo "[psy] Performing one workspace build after provisioning all services"
        bash "$SVCDIR/workspace.sh" build || true
        echo "[psy] Installing systemd units and enabling those with launchers"
        bash "$PROV/systemd/install_units.sh" || true
        # Start all services that have launchers present, regardless of enablement status
        echo "[psy] Starting services with launchers in /etc/psyched"
        if compgen -G "/etc/psyched/*.launch.sh" >/dev/null; then
          mapfile -t START_SVCS < <(for f in /etc/psyched/*.launch.sh; do [ -e "$f" ] || continue; b=$(basename "$f"); echo "${b%.launch.sh}"; done)
          if [ ${#START_SVCS[@]} -gt 0 ]; then
            for s in "${START_SVCS[@]}"; do
              echo "  -> sudo systemctl start psyched@${s}.service"
              sudo systemctl start "psyched@${s}.service" || true
            done
          fi
        else
          echo "[psy] No launchers found at /etc/psyched/*.launch.sh yet"
        fi
        ;;
      *) usage; exit 1;;
    esac
    ;;
  svc)
    sub="${1:-}"; shift || true
    case "$sub" in
      list)
        (cd "$SVCDIR" && ls -1 *.sh | sed 's/\.sh$//')
        ;;
      enable|disable)
        HOST="$(get_host)"
        CFG="$(host_cfg "$HOST")"
        NAME="${1:?service name}"
        tmp="$(mktemp)"
        if [ "$sub" = "enable" ]; then
          awk -v n="$NAME" '
            BEGIN{done=0}
            /^services[[:space:]]*=/ {print; inarr=1; next}
            inarr {
              if ($0 ~ /\]/ && done==0) { sub(/\]/,", \"" n "\" ]"); done=1 }
              print; if ($0 ~ /\]/) {inarr=0} ; next
            }
            {print}
            END{ if(done==0) print "services = [ \"" n "\" ]" }
          ' "$CFG" > "$tmp"
        else
          awk -v n="$NAME" '
            /^services[[:space:]]*=/ {print; inarr=1; next}
            inarr {
              gsub("\"" n "\"","")
              gsub(/,,/,",")
              gsub(/\[ *\]/,"[ ]")
              print
              if ($0 ~ /\]/) inarr=0
              next
            }
            {print}
          ' "$CFG" > "$tmp"
        fi
        mv "$tmp" "$CFG"
        echo "[psy] $sub $NAME on $HOST"
        ;;
      *) usage; exit 1;;
    esac
    ;;
  build)
    mkdir -p "$WS/src"
    # If any packages were queued, install them now
    common_flush_apt_queue || true
    bash "$SVCDIR/workspace.sh" build
    ;;
  bringup)
    if ! command -v ros2 >/dev/null 2>&1; then
      set +u; source /opt/ros/${ROS_DISTRO:-jazzy}/setup.bash || true; set -u
    fi
    sub="${1:-}"; shift || true
    case "$sub" in
      nav)
        bash "$PROV/bringup/nav2.sh"
        ;;
      *) usage; exit 1;;
    esac
    ;;
  systemd)
    sub="${1:-}"; shift || true
    case "$sub" in
      install) bash "$PROV/systemd/install_units.sh" ;;
      info)
        echo "[psy] systemctl summary (filtered)"
        systemctl --no-pager | grep -i "psych" || true
        if [ $# -gt 0 ]; then
          for s in "$@"; do
            printf "\n[psy] recent logs for psyched@%s.service\n" "$s"
            sudo journalctl -u "psyched@${s}.service" -n 200 --no-pager -o short-precise || true
            systemctl status "psyched@${s}.service" --no-pager -l | sed -n '1,5p' || true
          done
        fi
        ;;
      up)
        if compgen -G "/etc/psyched/*.launch.sh" >/dev/null; then
          mapfile -t UNITS < <(for f in /etc/psyched/*.launch.sh; do [ -e "$f" ] || continue; b=$(basename "$f"); echo "psyched@${b%.launch.sh}.service"; done)
        else
          mapfile -t UNITS < <(systemctl list-unit-files 'psyched@*.service' --no-legend \
            | awk '$1 ~ /^psyched@.+\.service$/ {print $1}')
        fi
        if [ ${#UNITS[@]} -eq 0 ]; then
          echo "[psy] No psyched@*.service unit files installed"
        else
          sudo systemctl start "${UNITS[@]}" || true
        fi
        ;;
      down)
        if compgen -G "/etc/psyched/*.launch.sh" >/dev/null; then
          mapfile -t UNITS < <(for f in /etc/psyched/*.launch.sh; do [ -e "$f" ] || continue; b=$(basename "$f"); echo "psyched@${b%.launch.sh}.service"; done)
        else
          mapfile -t UNITS < <(systemctl list-units 'psyched@*.service' --no-legend \
            | awk '$1 ~ /^psyched@.+\.service$/ {print $1}')
        fi
        if [ ${#UNITS[@]} -eq 0 ]; then
          echo "[psy] No running psyched@*.service units"
        else
          sudo systemctl stop "${UNITS[@]}" || true
        fi
        ;;
      *) usage; exit 1;;
    esac
    ;;
  say)
    # Publish a message to voice topic
    if [ $# -eq 0 ]; then
      echo "Usage: psy say <text>" >&2
      exit 1
    fi
    if ! command -v ros2 >/dev/null 2>&1; then
      set +u; source /opt/ros/${ROS_DISTRO:-jazzy}/setup.bash 2>/dev/null || true; set -u
    fi
    if ! command -v ros2 >/dev/null 2>&1; then
      echo "[psy] ERROR: ros2 CLI not found (install or source environment)." >&2
      exit 2
    fi
    host_short="$(hostname -s)"
    topic="/voice/${host_short}"
    msg="$*"
    # Escape for YAML inline string
    msg_esc="${msg//\\/\\\\}"
    msg_esc="${msg_esc//\"/\\\"}"
    ros2 topic pub --once "$topic" std_msgs/String "{data: \"$msg_esc\"}" || {
      echo "[psy] ERROR: failed to publish to $topic" >&2
      exit 3
    }
  *) usage; exit 1;;
esac
